
plugins {
   // id "org.sonarqube" version "2.4"
    id 'war'
    id 'io.spring.dependency-management' version '1.0.1.RELEASE'
    id 'idea' // optional (to generate IntelliJ IDEA project files)
    id 'org.hidetake.ssh'  version '2.9.0'

}

apply plugin: 'java'
apply plugin: "jacoco"
//apply plugin:  "application"

sourceCompatibility = 1.8
targetCompatibility = '1.8'
version = '4.10.2'


//println configurations.runtime.resolve();
task doFirst(){
 //   println sourceSets.main.runtimeClasspath.asPath
 //   println $classpath
}

clean.dependsOn doFirst

//sourceSets.test.resources.srcDirs += [ "src/test/resources" ]
//sourceSets.main.resources.includes += [ "**/*.properties" ]


configurations {
    provided
}




repositories {
    mavenCentral()
    jcenter()

}


dependencyManagement {
    imports {
        mavenBom 'org.apache.logging.log4j:log4j-bom:2.11.1'
    }
}

//task copyTestResources(type: Copy) {
//    from "${projectDir}/src/test/resources"
//    into "${buildDir}/classes/java/test"
//    println "Copied over \"${projectDir}/src/test/resources\" ${buildDir}/classes/java/test"
//
//    //sourceSets.main.runtimeClasspath.each { println it}
//}
//testClasses.dependsOn copyTestResources


dependencies {

    compile group: 'javax.inject', name: 'javax.inject', version: '1'

    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    compile group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    compile group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.9.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'

    compile group: 'javax.enterprise', name: 'cdi-api', version: '2.0'
    compile group: 'javax.websocket', name: 'javax.websocket-api', version: '1.1'

   // compile "org.codehaus.groovy.modules.http-builder:http-builder:0.5.2"

// https://mvnrepository.com/artifact/org.mock-server/mockserver-client-java
    compile group: 'org.mock-server', name: 'mockserver-client-java', version: '5.5.0'
    //compile group: 'org.mock-server', name: 'mockserver-maven-plugin', version: '3.8.1'

// https://mvnrepository.com/artifact/org.mortbay.jetty/jetty
   // compile group: 'org.mortbay.jetty', name: 'jetty', version: '6.1.5'


    testCompile('org.junit.jupiter:junit-jupiter-api:5.3.2')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.3.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.2')
    testCompile('org.glassfish:javax.json:1.1.4')

//    def tomcatVersion = '9.0.13'
//    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
//            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
   // classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'

}


//tomcat {
//    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
//    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
//}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}


remotes {
    webServer {
        host = '192.168.1.180'
        user = 'tomcat'
        identity = file('id_rsa')
    }
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: 'build/libs/sonoffwebsockets.war', into: '/tmp'
                //execute 'sudo service tomcat restart'
            }
        }
    }
}


task echo{
  //  println "echo $printenv"
}

jar {
    archiveName = 'sonoffwebsockets.jar'
}


war {
    archiveName = 'sonoffwebsockets.war'

   // metaInf { from 'src/main/resources/context.xml' }



}

// https://localhost:9443/docs/manager-howto.html#Deploy_a_Directory_or_WAR_by_URL
// https://localhost:9443/manager/text/deploy?path=/sonoffwebsockets&war=file:/tmp/sonoff-webapps/sonoffwebsockets.war
//https://localhost:9443/manager/text/deploy?update=true&path=/tmp/sonoff-webapps/sonoffwebsockets.war

// works: https://localhost:9443/manager/text/undeploy?path=/sonoffwebsockets
// works: https://localhost:9443/manager/text/deploy?path=/sonoffwebsockets&war=file:/tmp/sonoff-webapps/sonoffwebsockets.war
// works: https://192.168.1.180:9443/manager/text/deploy?path=/sonoffwebsockets&war=file:/tmp/sonoff-webapps/sonoffwebsockets.war




task deployLocalTomcat(type: Copy) {
    from 'build/libs/sonoffwebsockets.war'
    into '/tmp/sonoff-webapps'
}


task cleanWar( type:Exec) {
    // workingDir "${glassfishHome${File.separator}bin"
    workingDir "/opt/glassfish5/glassfish/bin"


    commandLine "./asadmin"
    args "undeploy",  "sonoffwebsockets"



}

task undeployTomcat( type:Exec) {
    // workingDir "${glassfishHome${File.separator}bin"
    workingDir "/opt/glassfish5/glassfish/bin"


    commandLine "./wget"
    args "undeploy",  "sonoffwebsockets"



}



//war.dependsOn cleanWar

task run(dependsOn: 'war', type:Exec) {
   // workingDir "${glassfishHome${File.separator}bin"
    workingDir "/opt/glassfish5/glassfish/bin"

  //  if (System.properties['os.name'].toLowerCase().contains('windows')) {
  //      commandLine 'cmd', '/c', 'asadmin.bat'
  //  } else {

    commandLine "./asadmin"
   // }
    args "deploy", "--force=true", "/home/bearingpoint/wk-devops/SonoffWebSockets/build/libs/sonoffwebsockets.war"
 }


//https://gradle-ssh-plugin.github.io/